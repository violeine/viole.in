---
export interface Props {
  title?: string;
  icon?: string;
  span?: string | number;
}

const { icon, span } = Astro.props;
import { listContent, toURL } from "@/lib/ash.js";

import "@fontsource/lexend-deca/variable.css";

import "@/styles/reset.css";
import "@/styles/base.css";
import Grid from "@/components/grid.astro";
import Cell from "@/components/cell.astro";

const data = await listContent(Astro.url.pathname);
const title = Astro.props.title ?? Astro.url.pathname.split("/").at(-2);
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/font-et-book/0.1/et-book.min.css"
    />
    <title>{title}</title>
    <link
      rel="icon"
      href={`data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${
        icon ?? "ðŸ—¿"
      }</text></svg>`}
    />
  </head>
  <body>
    <Grid columns={8}>
      <Cell span="1-2">
        <nav>
          <h2><a href="/">(Î»)</a></h2>
          {
            data.map((el) => (
              <ul class="compact">
                {el.map((a) => (
                  <li>
                    <a
                      class:list={[
                        { italic: Astro.url.pathname.includes(`/${toURL(a)}`) },
                        { italic: Astro.url.pathname === `/${toURL(a)}` },
                      ]}
                      href={`/${toURL(a)}`}
                    >
                      {toURL(a).split("/").at(-1)}
                    </a>
                  </li>
                ))}
              </ul>
            ))
          }
        </nav>
      </Cell>
      <Cell span={span ?? "3.."}>
        <slot />
      </Cell>
    </Grid>
  </body>
</html>
